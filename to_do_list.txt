Left to do:
*"cat << 1 | echo a" -> multiple fds left open in the child process?
Potentially:
What’s Happening with These FDs:

FD 3 (/dev/pts/2): This is typical for interactive terminal sessions. It’s the pseudo-terminal that the shell and programs use to interact with your terminal.
FD 4 and 5: These are not associated with any specific files or devices in your output, but they are open because of the shell environment. These might be related to things like standard pipes or files used by the shell to manage input/output redirection, or other system-level operations.
Why These FDs Are Open: These open file descriptors likely come from the shell environment itself, which manages things like file redirection and pipes. In your case, the shell opens them to handle standard input/output, the here-document mechanism (<<1), and the pipe (|), but they aren't directly managed by the command (cat or echo).

No Memory Leaks or Errors: Valgrind's output indicates there are no memory leaks, and no other errors are present. The FDs are just being reported because they remain open at the time Valgrind checks the process status at exit.



Done:
*only having "" as input causes leaks 
*"/bin/ls/hi" -> exit code should be 126, not 127
*"export hi" -> "hi" should not appear when env is called, only when export is called
*"export hi=" -> should only appear as "hi=" in env, but as "hi=""" in export

Pressing only enter after a executing a command should not reset the exit code
Spaces | cat -e
Env -i .\minishell => env -i bash => if it’s null create a default env 
“” => should return command not found like “ “
/bin/cat < Makefile => leaks
Export 42 t=Hello => should export t not exit because of 42
Export hello => just add hello
Export hello= => add hello=‘’
Exit with a big big big number => numeric argument required
Exit with too many arguments 
Exit code with ctrl D => should be 1 
Exit code wrong if we run a program with sec fault
Cat << ‘1’ => should be like cat << 1
Echo “‘$USER’” => should be ‘arissane’ 
‘>>’ out2 => should not work
=> should not work
./minishell hello => should be an error 
Env word word => should error 
Export mini=‘ls -la’ + $mini => should return something 
Unset -I => error should be unset not export 
Rm a folder (../../dir) we are in and pwd => should not exit
Env | grep=PWD => should work 
(If we remove PWD, OLDPWD is empty => should have something) ? 
<<1 cat >> o => not working 
<< => seg fault 
>>>>>>>>> => syntax error

Should be working for now:
-Display prompt
-Working history
-Handle quotes
-Tokenisation
-executables
-redirections
-parsing
-pipes
-cd
-echo -n
-pwd
-exit
-env
-Handle ctrl-C, -D, and -\
-<< <  > >> (probably works now?)
- unset
- export & export ARG


Tests:
""
127
/bin/ls/hi
126
/bin/ks
127
echo -n -nN
exit 1 a
exit a 1
	| echo hi
echo "$"$"$"
export hi
export hi=
export test1="ls -la" test2="ls"
$test1
unset test1 test2
<infile>outfile cat
echo a |>outfile
cat <<1''



Some thoughts of the day:

cat <test1 test2
result: test1 is opened as input, but cat will prioritise files and only
	shows the content of test2.

ls > test1 >test2 (test1 doesn't exist, test2 has no permission to write)
result: test1 is created and opened, test2 open fails, process ends and
	ls is not executed.

Exit codes:
0 success
1 command failed
126 you dont have the permission
127 command doesn't exist
127 + signal:  a signal Killed or interrupted the command
2 error parsing
error fd = 2

cat < test.txt | grep "hi"
Redirection passes the content of test.txt to cat as an input, output from
cat goes to pipe, grep receives it as input and searches for "hi".

Redirections should probably occur during the pipeline rather than the 
individual commands, testing ways to do this.

Need to parse redirections without spaces.
echo<test.txt

echo a > test.txt 1 > test2.txt
results in "a 1" being written in both .txt files

echo a > test.txt | echo 1
It seems the pipe takes precedence over the redirection and > does nothing.
The ouput of echo a is sent to echo 1 as an input.
(echo a > test.txt) | echo 1
Would do the redirection first.


10.9.24
We may need to save the output from one valid set of instructions in the cmd_list
as an input for the next. For example:
cat << s > test.txt
would wait for input until a line of input is only s followed by newline, then
cat the resulted list of text, which will be used as an input for the > operator
and saved in test.txt.
First action:
cat << s
string1
string2
s
input for cat is the result of << operation, which is the 2 lines of text until s
is encountered on it's own. cat will then output the result as an input for the >
operator.
Second action:
"string1\nstring2\n" > test.txt
So instead of ever showing any output on the terminal, the output was instead
redirected as an input for test.txt. This doesn't work with echo, because echo
doesn't read stdin. It seems we can't really utilize the << operator that well
with the function we are given. It only seems to really work with env, where it
can be used to give multiple instructions at once. However, << works on it's own
as well:
<< s > test.txt
string1
string2
s
results in the same outcome. It seems we can also have multiple << operators in
a row:
<< 1 << 2 << 3 << 4

Maybe this program structure would work:
-read the input
-check validity
-break the input into separate processes
-(check the validity of each process separately?)
-do a process, return the output as a string(?)
-take the output from the last process as input for the next
-repeat until no processes are left
-read the next input
-repeat until exit
